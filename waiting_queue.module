<?php

/**
 * Runs the named queue with no timeout.
 *
 * @param $queue_name
 *   Arbitrary string. The name of the queue to work with.
 */
function waiting_queue_process_queue($queue_name) {
  set_time_limit(0);
  $default_queue_process_lifetime = variable_get('waiting_queue_process_lifetime', 3600);
  $end_time = variable_get('waiting_queue_process_lifetime_' . $queue_name, $default_queue_process_lifetime) + time();

  $queue = DrupalQueue::get($queue_name);
  $function = waiting_queue_get_callback_function($queue_name);

  while (TRUE) {
    try {
      while ($item = $queue->claimItem()) {
        if (time() < $end_time) {
          // Only run the job if we haven't exceeded processing lifetime after claiming.
          $function($item->data);
          $queue->deleteItem($item);
        }
        else {
          $queue->releaseItem($item);
          break 2;
        }
      }
    }
    catch (Exception $e) {
      $error_info = array(
        '%queue_name' => $queue_name,
        '%error_message' => $e->getMessage(),
      );
      watchdog('waiting_queue', t("Error processing queue %queue_name, got error '%error_message'.", $error_info));
      if (!empty($item) && waiting_queue_delete_on_exception($queue_name)) {
        $queue->deleteItem($item);
      }
    }
  }
}

/**
 * Gets the callback function for the given queue.
 */
function waiting_queue_get_callback_function($queue_name) {
  $cron_queues = module_invoke_all('cron_queue_info');
  drupal_alter('cron_queue_info', $cron_queues);
  if (isset($cron_queues[$queue_name])) {
    return $cron_queues[$queue_name]['worker callback'];
  }

  // Check for modules implementing hook_queue_info().
  $queues = module_invoke_all('queue_info');
  drupal_alter('queue_info', $queues);
  if (isset($queues[$queue_name])) {
    return $queues[$queue_name]['cron']['callback'];
  }
}

/**
 * Get the failure behaviour configured for this queue.
 */
function waiting_queue_delete_on_exception($queue_name) {
  $queues = module_invoke_all('cron_queue_info');
  drupal_alter('cron_queue_info', $queues);
  if (isset($queues[$queue_name], $queues[$queue_name]['delete on exception'])) {
    return $queues[$queue_name]['delete on exception'];
  }
  else {
    return variable_get('waiting_queue_delete_on_exception', TRUE);
  }
}

